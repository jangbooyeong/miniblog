[
  {
    "id": 1,
    "title": "자바스크립트란?",
    "content": "HTML과 CSS로 만들어진 웹 페이지에 생동감을 불어넣기 위해 만들어진 객체기반의 스크립트 프로그래밍 언어입니다.",
    "imageUrl": "https://blog.kakaocdn.net/dn/ehtbOu/btsiO6ONfG8/L6oHzzZWSUHVayCVTiC1rK/img.png",
    "lists": [
      {
        "id": 11,
        "title": "console.log() 메서드",
        "content": "웹 페이지의 콘솔을 통해 데이터를 출력해준다.\n대부분의 주요 웹 브라우저에서는 F12 (개발자 도구)를 누른 후 메뉴에서 콘솔을 클릭하면 볼 수 있다.\n콘솔 화면을 통한 데이터의 출력은 좀 더 자세한 사항까지 출력되서 디버깅하는데 많은 도움을 준다."
      },
      {
        "id": 12,
        "title": "변수( Variable )란?",
        "content": "변수는 ( 문자나 숫자 같은 ) 값을 담는 컨테이너로 값을 유지할 필요가 있을 때 사용한다.\n여기에 담겨진 값은 다른 값으로 바꿀 수 있다. 변수는 컴퓨터의 메모리에 존재하는 공간이다.\n값을 찾기 쉽게 할려고 이름을 붙여서 사용한다."
      },
      {
        "id": 13,
        "title": "변수의 데이터 타입",
        "content": "데이터 타입 ( Data Type )는 프로그래밍 언어에서 사용할 수 있는 데이터 ( 숫자, 문자열, 불리언 등 )의 종류를 말한다.\n코드에서 사용되는 모든 데이터는 메모리에 저장하고 참조할 수 있어야 한다.\n데이터 타입은 데이터를 메모리에 저장할 때 확보해야 하는 메모리 공간의 크기와 할당할 수 있는 유효한 값에 대한 정보, 그리고 메모리에 저장되어 있는 2진수 데이터를 어떻게 해석할 지에 대한 정보를 컴퓨터와 개발자에게 제공한다."
      },
      {
        "id": 14,
        "title": "배열( array )",
        "content": "배열은 다수의 데이터를 저장하고 처리하는 경우에 유용하게 사용할 수 있다.\n예를 들어 100개의 데이터를 처리해야 한다면 배열을 사용하지 않으면 100개의 변수가 필요하다.\n그러면 코딩하기도 힘들고 코드량도 길어지기 때문에 배열을 이용하면 효율적으로 짤 수 있다.\n 자바스크립트 배열은 배열 내부의 데이터 타입이 서로 달라도 쓸 수 있고 배열의 크기가 동적으로 변할 수 있다.\n배열안에 number, string, boolean, object, array 등 들어갈 수 있다."
      },
      {
        "id": 15,
        "title": "객체( object )",
        "content": "객체는 데이터와 그 데이터에 관련한 동작 ( 절차, 방법, 기능 ) 을 모두 포함할 수 있는 개념적 존재이다.\n이름 ( key ) 과 값 ( value ) 을 가지는 데이터를 의미하는 프로퍼티와 동작을 의미하는 메소드 ( method )를 포함할 수 있는 독립적 주체이다."
      },
      {
        "id": 16,
        "title": "조건문( Conditions )이란 ?",
        "content": "JavaScript의 비교, 논리 연산자와 boolean 데이터 타입을 이용하여 조건문을 사용할 수 있다.\n조건문의 종류는 크게 if와 switch가 있다."
      }
    ]
  },
  {
    "id": 2,
    "title": "리엑트란?",
    "content": "리액트(React)는 페이스북에서 개발한 자바스크립트 라이브러리로, 사용자 인터페이스를 만들기 위한 목적으로 만들어졌습니다.",
    "imageUrl": "https://velog.velcdn.com/images/goldenoriole34/post/f6d6dd0a-4af8-44d8-9f66-db0c15ad60fc/image.png",
    "lists": [
      {
        "id": 21,
        "title": "JSX 문법",
        "content": "JSX에서는 HTML과 유사한 태그를 사용하여 리액트 컴포넌트를 작성합니다.\n이러한 태그들은 리액트 엘리먼트를 생성하며, 컴포넌트의 구조를 표현하는 데 사용됩니다.JSX 안에서는 중괄호 {}를 사용하여 자바스크립트 표현식을 삽입할 수 있습니다.\n이를 통해 동적인 값을 삽입하거나 자바스크립트 변수를 사용할 수 있습니다.\nJSX 코드는 바벨(Babel)과 같은 트랜스파일러를 통해 일반 자바스크립트 코드로 변환됩니다.변환된 코드는 브라우저에서 실행 가능한 형태로 되며, 이를 통해 브라우저 호환성을 유지합니다."
      },
      {
        "id": 22,
        "title": "리액트 컴포넌트( React Component )",
        "content": "리액트 컴포넌트(React Component)는 리액트 애플리케이션의 기본 구성 요소로, 재사용 가능하며 독립적으로 동작하는 UI 조각입니다.\n 이 컴포넌트들은 사용자 인터페이스를 나타내는데 사용되며, 각 컴포넌트는 자체적인 상태(state)와 속성(props)을 가질 수 있습니다."
      },
      {
        "id": 23,
        "title": "props 속성( properties )",
        "content": "props는 부모 컴포넌트에서 자식 컴포넌트로 읽기 전용으로 전달되며, 자식 컴포넌트에서는 이 데이터를 사용하여 UI를 렌더링하거나 해당 데이터를 가지고 작업을 수행할 수 있습니다.\nprops를 통해 부모와 자식 컴포넌트 간에 효과적으로 데이터를 전달하여 컴포넌트를 유연하게 구성할 수 있습니다."
      },
      {
        "id": 24,
        "title": "state 훅( HOOK )",
        "content": "state는 리액트(React) 컴포넌트에서 관리되는 내부 데이터로, 컴포넌트의 상태나 데이터의 변경을 추적하고 업데이트하는 데 사용됩니다.\n각각의 컴포넌트는 자체적으로 상태를 가질 수 있으며, 이 상태는 컴포넌트의 렌더링, 동작, 그리고 사용자와의 상호작용에 영향을 미칩니다.\nstate는 주로 클래스 기반 컴포넌트에서 사용되며, 함수형 컴포넌트에서는 useState 훅을 사용하여 상태를 관리합니다."
      },
      {
        "id": 25,
        "title": "리액트 컴포넌트의 라이프사이클",
        "content": "모든 컴포넌트는 여러 종류의 “생명주기 메서드”를 가지며, 이 메서드를 오버라이딩하여 특정 시점에 코드가 실행되도록 설정할 수 있다.\n자주 사용하는 메서드는 componenetDidMount()나 componentWillUnmount() 이다.\ncomponentDidMount()에서 이벤트를 등록하고 componentWillUnmount()에서 이벤트를 해제하는 패턴을 많이 사용합니다."
      }
    ]
  },
  {
    "id": 3,
    "title": "타입스크립트란?",
    "content": "TypeScript는 JavaScript와 거의 동일한 데이터 타입을 지원하며, 열거 타입을 사용하여 더 편리하게 사용할 수 있습니다.",
    "imageUrl": "https://images.velog.io/images/julianneyi/post/4958ed6b-25e5-4051-8e84-b78daa4ce2d7/download%20(1).png",
    "lists": [
      {
        "id": 31,
        "title": "함수 선언",
        "content": "TypeScript 함수는 JavaScript와 마찬가지로 기명 함수(named function)과 익명 함수(anonymous function)로 만들 수 있습니다.\n이를 통해 API에서 함수 목록을 작성하든 일회성 함수를 써서 다른 함수로 전달하든 애플리케이션에 가장 적합한 방법을 선택할 수 있습니다."
      },
      {
        "id": 32,
        "title": "인터페이스 (Interface)?",
        "content": "TypeScript의 핵심 원칙 중 하나는 타입 검사가 값의 형태에 초점을 맞추고 있다는 것입니다.\n이를 덕 타이핑(duck typing)혹은 구조적 서브타이핑 (structural subtyping)이라고도 합니다.\nTypeScript에서, 인터페이스는 이런 타입들의 이름을 짓는 역할을 하고 코드 안의 계약을 정의하는 것뿐만 아니라 프로젝트 외부에서 사용하는 코드의 계약을 정의하는 강력한 방법입니다."
      },
      {
        "id": 33,
        "title": "타입( type )",
        "content": "type 키워드는 interface와는 다르게 새로운 타입을 생성하는 것이 아닌 별칭을 부여하는 것이다.\nextends 키워드는 사용할 수 없다.타입 별칭과 인터페이스의 가장 큰 차이점은 타입의 확장 가능 / 불가능 여부이다.\n인터페이스는 확장이 가능한데 반해 타입 별칭은 확장이 불가능하다. 따라서, 가능한한 type 보다는 interface로 선언해서 사용하는 것을 추천한다."
      },
      {
        "id": 34,
        "title": "Enum",
        "content": "열거형(Enums)으로 이름이 있는 상수들의 집합을 정의할 수 있습니다.\n열거형을 사용하면 의도를 문서화 하거나 구분되는 사례 집합을 더 쉽게 만들수 있습니다.\nTypeScript는 숫자와 문자열-기반 열거형을 제공합니다."
      },
      {
        "id": 35,
        "title": "제네릭(generics)",
        "content": "C#과 Java 같은 언어에서, 재사용 가능한 컴포넌트를 생성하는 도구상자의 주요 도구 중 하나는 제네릭입니다,\n즉, 단일 타입이 아닌 다양한 타입에서 작동하는 컴포넌트를 작성할 수 있습니다.\n사용자는 제네릭을 통해 여러 타입의 컴포넌트나 자신만의 타입을 사용할 수 있습니다."
      }
    ]
  },
  {
    "id": 4,
    "title": "Node.js란?",
    "content": "자바스크립트(Javascript)를 활용하며, Non-blocking I/O와 단일 스레드 이벤트 루프를 통한 높은 처리 성능을 가지고 있는 것이 특징이다.",
    "imageUrl": "https://pic1.zhimg.com/v2-20c65f860d74a2cda0a17683335aff92_ipico.jpg?source=172ae18b",
    "lists": [
      {
        "id": 41,
        "title": "자바스크립트 런타임",
        "content": "런타임이란 특정 언어로 만든 프로그램을 실행할 수 있는 환경을 뜻한다.\n따라서 노드는 자바스크립트 프로그램을 컴퓨터에서 실행할 수 있게 하는 자바스크립트 실행기이다.특히 2008년 구글이 V8 엔진을 사용하여\n크롬을 출시했고 V8 엔진은 다른 자바스크립트 엔진과 달리 매우 빨라 라이언 달(Ryan Dahl)은 2009년 V8 엔진 기반의 노드 프로젝트를 시작하며 세상에 나왔다."
      },
      {
        "id": 42,
        "title": "이벤트 기반",
        "content": "노드는 V8과 더불어 libuv라는 라이브러리를 사용한다.\nlibuv 라이브러리는 노드의 특성인 이벤트 기반, 논 블로킹 I/O 모델을 구현하고 있다.이벤트 기반(Event-driven)이란\n이벤트가 발생할 때 미리 지정해둔 작업을 수행하는 방식을 의미한다.\n즉, 이벤트 기반 시스템에서는 특정 이벤트가 발생할 때 무엇을 할지 미리 등록해두고,\n이를 이벤트 리스너에 콜백함수를 등록한다.이후 이벤트가 발생하면 리스너에 등록해둔 콜백함수를 호출하며,이벤트가 끝난 후 노드는 다음 이벤트가 발생할 때까지 대기한다."
      },
      {
        "id": 43,
        "title": "이벤트 루프",
        "content": "이벤트 루프(event loop)는 여러 이벤트가 동시에 발생했을 때 어떤 순서로 콜백함수를 호출 할지를 이벤트 루프가 판단한다.\n노드는 이벤트가 종료될 때까지 이벤트 처리를 위한 작업을 반복하므로 루프(loog)라고 부른다."
      },
      {
        "id": 44,
        "title": "논 블로킹 I/O ",
        "content": "이벤트 루프를 잘 활용하면 오래 걸리는 작업을 효율적으로처리할 수 있다.\n작업에는 두 가지 종류가 있는데 동시에 실행될 수 있는작업과 동시에 실행될 수 없는 작업이다.특히 파일 시스템 접근,네트워크를 통한 요청 작업은 입력(Input)/출력(Output)의 일종이며,\n이러한 작업을 할 때 노드는 비동기 방식으로 블로킹을 만들지 않게 끔(논 블로킹) 처리한다.\n비동기이란 이전 작업이 완료될 때까지 대기하지 않고 동시에 작업을 수행한다.반대로 동기는 이전 작업이 끝나야만 다음 작업을 수행한다.\n자세하게 풀어서 아야기하면 함수 호출 시 당장 실행하는 것이 아니라(동기→블로킹) 일단 어느 곳에 쌓아 놓고 동시에 요청을 처리하고(비동기→논 블로킹) 요청이 완료된 순서대로처리(스택 이용) 한다는 말이다."
      },
      {
        "id": 45,
        "title": "싱글 스레드",
        "content": "이벤트 기반, 논 블로킹 모델과 더불어 노드를 설명하는 키워드 중 하나는 싱글 스레드이다.\n자바스크립트 코드는 동시에 실행될 수 없는데 그 이유는 노드가 싱글 스레드 기반이기 때문이다.프로세스 : 운영체제에서 할당하는 작업의 단위이다.\n노드나 웹 브라우저 같은 프로그램은 개별적인 프로세스이다. 프로세스 간에는 메모리 등의 자원을 공유하지 않는다.\n스레드 : 스레드는 프로세스 내에서 실행되는 흐름의 단위이다.프로세스는 스레드를 여러 개 생성해 여러 작업을 동시에 처리할 수 있다. 스레드들은 부모 프로세스의 자원을 공유한다.\n같은 주소의 메모리에 접근 가능하므로 데이터를 공유할 수 있다.\nNode.js는 싱글스레드,논 블로킹 모델로 싱글 스레드가 혼자서 일을 처리하지만 들어오는 요청 순서가 아닌 논 블로킹 방식으로 이전 작업이 완료될 때까지 대기하지 않고 다음 작업을 수행한다."
      }
    ]
  }
]